
// https://github.com/nats-io/nats.js

const nats = require("nats")
const sc = nats.StringCodec();

const trace = (n) => {
    return `'${n.type}'='${n.name}' id=${n.id} flow=${n.z}`
}

// TODO: settings
const NATS_SERVERS = "127.0.0.1:4222"
const TOPIC_PREFIX = "lzrd.";

const natsConnectionOptions = {
    name: 'nodered',
    maxReconnectAttempts: -1,
    reconnect: true,
    servers: NATS_SERVERS,
    verbose: false,
    debug: false,
    waitOnFirstConnect: true,
};

const natsClient = new Promise((resolve, reject) => {
    nats.connect(natsConnectionOptions).then(nc => {
        console.log("Nats connected", nc.getServer());
        resolve(nc);
    });
});

class Broker {

    constructor(props) {
        this.subs = {};
    }

    /**
     * @param node Node
     * @param callback function(msg,send,done)
     * @returns {*}
     */
    async subscribeNodeEvents(node) {
        console.log("SUB", trace(node));
        const topic = TOPIC_PREFIX+node.id;
        const onEvent = (msg) => {
            const { node } = this.subs[topic];
            node.receive(msg);
        }
        const sub = await this._subscribe(topic, onEvent);
        this.subs[topic] = {sub, node};
    }

    unsubscribeNodeEvents(node) {
        console.log("UNSUB", trace(node));
        const topic = TOPIC_PREFIX+node.id;
        if (this.subs[topic] !== undefined) {
            const {sub} = this.subs[topic];
            delete this.subs[topic];
            sub.unsubscribe();
        }
    }

    sendEvent(sendEvent) {
        const node = sendEvent.destination.node;
        //console.log("PUB", trace(node), sendEvent.msg);
        this._publish(TOPIC_PREFIX+node.id, sendEvent.msg);
        //sendEvent.destination.node.receive(sendEvent.msg);
    }

    async _publish(topic, message) {
        const json = JSON.stringify(message);
        const nc = await natsClient;
        nc.publish(topic, sc.encode(json));
    }

    async _subscribe(topic, onEvent){
        const nc = await natsClient;
        const sub = nc.subscribe(topic);
        (async () => {
            for await (const m of sub) {
                const json = sc.decode(m.data);
                const msg = JSON.parse(json);
                // console.log(`[${sub.getProcessed()}]: ${sc.decode(m.data)}`);
                onEvent(msg);
            }

        })().then(r => console.log(`Topic ${topic} subscription closed`));
        return sub;
    }
}

const broker = new Broker();

module.exports = { broker }
